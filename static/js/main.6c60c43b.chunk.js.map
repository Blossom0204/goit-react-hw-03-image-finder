{"version":3,"sources":["components/Loader/Loader.styles.jsx","components/Loader/Loader.jsx","components/Searchbar/Searchbar.styles.jsx","components/Searchbar/Searchbar.jsx","services/api.js","components/ImageGalleryItem/ImageGalleryItem.styles.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.styles.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.styles.jsx","components/Button/Button.jsx","components/Modal/Modal.styles.jsx","components/Modal/Modal.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["LoaderContainer","styled","button","Loader","type","color","height","width","timeout","Component","Searchbar","header","SearchForm","form","SearchFormButton","SearchFormButtonLabel","span","SearchFormInput","input","Searchedbar","state","searchQuery","handleSubmit","e","preventDefault","trim","props","onSubmit","reset","toast","warn","position","autoClose","handleChange","value","target","setState","this","autocomplete","autoFocus","onChange","placeholder","protoType","PropTypes","string","axios","defaults","baseURL","Api","fetchImages","page","get","then","response","data","hits","console","log","ImageGalleryItem","li","ImageGalleryItemImage","img","ImageGalleryItemList","alt","webformatURL","largeImageURL","loadLargeImageURL","src","onClick","ImageGallery","ul","ImageGalleryList","images","onSelect","map","id","tags","LoadMoreBtn","Button","Overlay","div","Modal","modalRoot","document","querySelector","ModalWindow","handleKeydown","code","onClose","handleBackdropClick","currentTarget","window","addEventListener","removeEventListener","createPortal","App","error","isLoading","selectedImage","showModal","toggleLoader","prevState","catch","finally","toggleModal","prevProps","scrollTo","top","documentElement","scrollHeight","behavior","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6c60c43b.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\nexport const LoaderContainer = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  width: 100vw;\r\n  height: 100vh;\r\n`\r\n","import { Component } from 'react'\r\nimport Spinner from 'react-loader-spinner'\r\nimport { LoaderContainer } from './Loader.styles'\r\n\r\nexport default class Loader extends Component {\r\n  render() {\r\n    return (\r\n      <LoaderContainer>\r\n        <Spinner\r\n          type=\"Hearts\"\r\n          color=\"#00BFFF\"\r\n          height={80}\r\n          width={80}\r\n          timeout={3000}\r\n        />\r\n      </LoaderContainer>\r\n    )\r\n  }\r\n}\r\n","import styled from '@emotion/styled'\r\nexport const Searchbar = styled.header`\r\n  top: 0;\r\n  left: 0;\r\n  position: sticky;\r\n  z-index: 1100;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 64px;\r\n  padding-right: 24px;\r\n  padding-left: 24px;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  color: #fff;\r\n  background-color: #3f51b5;\r\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\r\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\r\n`\r\nexport const SearchForm = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n`\r\nexport const SearchFormButton = styled.button`\r\n  display: inline-block;\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 0;\r\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\r\n  background-size: 40%;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  opacity: 0.6;\r\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  cursor: pointer;\r\n  outline: none;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\nexport const SearchFormButtonLabel = styled.span`\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  clip-path: inset(50%);\r\n  border: 0;\r\n`\r\nexport const SearchFormInput = styled.input`\r\n  display: inline-block;\r\n  width: 100%;\r\n  font: inherit;\r\n  font-size: 20px;\r\n  border: none;\r\n  outline: none;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n  &::placeholder {\r\n    font: inherit;\r\n    font-size: 18px;\r\n  }\r\n`\r\n","import { Component } from 'react'\r\nimport { toast } from 'react-hot-toast'\r\nimport {\r\n  Searchbar,\r\n  SearchForm,\r\n  SearchFormButton,\r\n  SearchFormButtonLabel,\r\n  SearchFormInput,\r\n} from './Searchbar.styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Searchedbar extends Component {\r\n  state = {\r\n    searchQuery: '',\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (this.state.searchQuery.trim() === '') {\r\n      toast.warn('⚠️Please enter search query name', {\r\n        position: 'top-right',\r\n        autoClose: 3000,\r\n      })\r\n      return\r\n    }\r\n    this.props.onSubmit(this.state.searchQuery)\r\n    this.reset()\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { value } = e.target\r\n    this.setState({ searchQuery: value })\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({ searchQuery: '' })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Searchbar>\r\n        <SearchForm onSubmit={this.handleSubmit}>\r\n          <SearchFormButton type=\"submit\">\r\n            <SearchFormButtonLabel>Search</SearchFormButtonLabel>\r\n          </SearchFormButton>\r\n          <SearchFormInput\r\n            autocomplete=\"off\"\r\n            autoFocus\r\n            onChange={this.handleChange}\r\n            placeholder=\"Search images and photos\"\r\n            type=\"text\"\r\n            value={this.state.searchQuery}\r\n          />\r\n        </SearchForm>\r\n      </Searchbar>\r\n    )\r\n  }\r\n}\r\nSearchedbar.protoType = {\r\n  searchQuery: PropTypes.string,\r\n}\r\n","import axios from 'axios'\r\n\r\naxios.defaults.baseURL = 'https://pixabay.com/api/'\r\nconst API_KEY = '21743820-34e3da196a7425b34b0857350'\r\n\r\nfunction fetchImages({ searchQuery, page }) {\r\n  try {\r\n    return axios\r\n      .get(\r\n        `?q=${searchQuery}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`,\r\n      )\r\n      .then((response) => response.data.hits)\r\n  } catch {\r\n    console.log('error')\r\n  }\r\n}\r\n\r\nconst Api = {\r\n  fetchImages,\r\n}\r\nexport default Api\r\n","import styled from '@emotion/styled'\r\nexport const ImageGalleryItem = styled.li`\r\n  border-radius: 2px;\r\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\r\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\r\n`\r\nexport const ImageGalleryItemImage = styled.img`\r\n  width: 100%;\r\n  height: 260px;\r\n  object-fit: cover;\r\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover {\r\n    transform: scale(1.03);\r\n    cursor: zoom-in;\r\n  }\r\n`\r\n","import {\r\n  ImageGalleryItem,\r\n  ImageGalleryItemImage,\r\n} from './ImageGalleryItem.styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ImageGalleryItemList = ({\r\n  alt = '',\r\n  webformatURL,\r\n  largeImageURL,\r\n  loadLargeImageURL,\r\n}) => {\r\n  return (\r\n    <ImageGalleryItem>\r\n      <ImageGalleryItemImage\r\n        alt={alt}\r\n        src={webformatURL}\r\n        onClick={() => loadLargeImageURL(largeImageURL)}\r\n      />\r\n    </ImageGalleryItem>\r\n  )\r\n}\r\n\r\nImageGalleryItemList.propTypes = {\r\n  image: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    alt: PropTypes.string,\r\n    webformatURL: PropTypes.string.isRequired,\r\n    largeImageURL: PropTypes.string.isRequired,\r\n    loadLargeImageURL: PropTypes.func.isRequired,\r\n  }),\r\n}\r\n\r\nexport default ImageGalleryItemList\r\n","import styled from '@emotion/styled'\r\nexport const ImageGallery = styled.ul`\r\n  display: grid;\r\n  max-width: calc(100vw - 48px);\r\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n  grid-gap: 16px;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n","import ImageGalleryItemList from '../ImageGalleryItem/ImageGalleryItem'\r\nimport { ImageGallery } from './ImageGallery.styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ImageGalleryList = ({ images, onSelect }) => {\r\n  return (\r\n    <ImageGallery>\r\n      {images.map(({ id, webformatURL, tags, largeImageURL }) => (\r\n        <ImageGalleryItemList\r\n          key={id}\r\n          webformatURL={webformatURL}\r\n          largeImageURL={largeImageURL}\r\n          alt={tags}\r\n          loadLargeImageURL={onSelect}\r\n        />\r\n      ))}\r\n    </ImageGallery>\r\n  )\r\n}\r\n\r\nImageGalleryList.propTypes = {\r\n  images: PropTypes.array.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ImageGalleryList\r\n","import styled from '@emotion/styled'\r\nexport const LoadMoreBtn = styled.button`\r\n  padding: 8px 16px;\r\n  margin: 0px auto;\r\n  border-radius: 2px;\r\n  background-color: #3f51b5;\r\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  text-align: center;\r\n  display: inline-block;\r\n  color: #fff;\r\n  border: 0;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  font-family: inherit;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  min-width: 180px;\r\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\r\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #303f9f;\r\n  }\r\n`\r\n","import { LoadMoreBtn } from './Button.styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Button = ({ onClick }) => {\r\n  return (\r\n    <LoadMoreBtn type=\"button\" onClick={onClick}>\r\n      Load more\r\n    </LoadMoreBtn>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Button\r\n","import styled from '@emotion/styled'\r\nexport const Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  z-index: 1200;\r\n`\r\nexport const Modal = styled.div`\r\n  max-width: calc(100vw - 48px);\r\n  max-height: calc(100vh - 24px);\r\n`\r\n","import { Component } from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport { Overlay, Modal } from './Modal.styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst modalRoot = document.querySelector('#modal-root')\r\n\r\nclass ModalWindow extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeydown)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeydown)\r\n  }\r\n\r\n  handleKeydown = (e) => {\r\n    if (e.code === 'Escape') {\r\n      this.props.onClose()\r\n    }\r\n  }\r\n\r\n  handleBackdropClick = (e) => {\r\n    if (e.currentTarget === e.target) {\r\n      this.props.onClose()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return createPortal(\r\n      <Overlay onClick={this.handleBackdropClick}>\r\n        <Modal>\r\n          <img src={this.props.largeImageURL} alt=\"\" />\r\n        </Modal>\r\n      </Overlay>,\r\n      modalRoot,\r\n    )\r\n  }\r\n}\r\nModalWindow.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  largeImageURL: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ModalWindow\r\n","import { Component } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport Loader from './components/Loader/Loader'\nimport Searchedbar from './components/Searchbar/Searchbar'\nimport Api from './services/api'\nimport ImageGalleryList from './components/ImageGallery/ImageGallery'\nimport Button from './components/Button/Button'\nimport ModalWindow from './components/Modal/Modal'\nimport PropTypes from 'prop-types'\n\nclass App extends Component {\n  state = {\n    error: null,\n    images: [],\n    isLoading: false,\n    selectedImage: '',\n    page: 1,\n    searchQuery: '',\n    showModal: false,\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchQuery !== this.state.searchQuery) {\n      this.fetchImages()\n    }\n\n    if (this.state.page !== 2 && prevState.page !== this.state.page) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      })\n    }\n  }\n\n  fetchImages = () => {\n    const { searchQuery, page } = this.state\n    this.toggleLoader()\n\n    Api.fetchImages({ searchQuery, page })\n      .then((hits) => {\n        this.setState((prevState) => ({\n          images: [...prevState.images, ...hits],\n          page: prevState.page + 1,\n        }))\n      })\n      .catch((error) => this.setState({ error: 'No image foumd' }))\n      .finally(() => this.setState(this.toggleLoader()))\n  }\n\n  loadLargeImageURL = (largeImageURL) => {\n    this.setState({ selectedImage: largeImageURL })\n    this.toggleModal()\n  }\n\n  handleSubmit = (value) => {\n    this.setState({\n      images: [],\n      page: 1,\n      searchQuery: value,\n    })\n  }\n\n  toggleLoader = () => {\n    this.setState((prevState) => ({ isLoading: !prevState.isLoading }))\n  }\n\n  toggleModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }))\n  }\n\n  render() {\n    const { error, images, isLoading, selectedImage, showModal } = this.state\n    return (\n      <>\n        {error &&\n          toast.error('No image found!', {\n            position: 'top-right',\n            autoClose: 3000,\n          })}\n        <Searchedbar onSubmit={this.handleSubmit} />\n        {isLoading && <Loader />}\n        <ImageGalleryList images={images} onSelect={this.loadLargeImageURL} />\n        {images.length > 11 && <Button onClick={this.fetchImages} />}\n        {showModal && (\n          <ModalWindow\n            onClose={this.toggleModal}\n            largeImageURL={selectedImage}\n          />\n        )}\n        {<ToastContainer position=\"top-right\" autoClose={3000} />}\n      </>\n    )\n  }\n}\nApp.propTypes = {\n  error: PropTypes.string,\n  images: PropTypes.array,\n  isLoading: PropTypes.bool,\n  selectedImage: PropTypes.string,\n  page: PropTypes.number,\n  searchQuery: PropTypes.string,\n  showModal: PropTypes.bool,\n}\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}